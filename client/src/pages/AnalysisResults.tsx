import { useQuery } from "@tanstack/react-query";
import { useRoute } from "wouter";
import { ArrowLeft, Download, CheckCircle, AlertTriangle, TrendingUp, Clock, Users, Target } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Link } from "wouter";
import { AnalysisResult, ConsultationRequest } from "@shared/schema";

export default function AnalysisResults() {
  const [, params] = useRoute("/analysis/:id");
  const consultationId = params?.id;

  const { data: consultation, isLoading: consultationLoading } = useQuery<ConsultationRequest>({
    queryKey: ["/api/consultations", consultationId],
    enabled: !!consultationId,
  });

  const { data: analysis, isLoading: analysisLoading } = useQuery<AnalysisResult>({
    queryKey: ["/api/analysis", consultationId],
    enabled: !!consultationId,
  });

  const isLoading = consultationLoading || analysisLoading;

  const formatDate = (date: string | Date) => {
    return new Date(date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const downloadReport = () => {
    if (!analysis || !consultation) return;

    const reportContent = `
CONTENTSCALE BUSINESS CONSULTING REPORT
======================================

Consultation: ${consultation.title}
Category: ${consultation.category}
Date: ${formatDate(analysis.createdAt)}
Confidence Level: ${Math.round(analysis.confidence * 100)}%

ANALYSIS OVERVIEW
================
${analysis.analysis}

RECOMMENDATIONS
===============
${analysis.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

ACTION ITEMS
============
${analysis.actionItems.map((item, i) => `${i + 1}. ${item}`).join('\n')}

RISK ASSESSMENT
===============
${analysis.riskAssessment || 'No specific risks identified'}

EXPECTED OUTCOMES
=================
${analysis.expectedOutcomes.map((outcome, i) => `${i + 1}. ${outcome}`).join('\n')}

IMPLEMENTATION PLAN
==================
${analysis.implementationPlan}

REQUIRED RESOURCES
==================
${analysis.resources.map((resource, i) => `${i + 1}. ${resource}`).join('\n')}

SUCCESS METRICS
===============
${analysis.metrics.map((metric, i) => `${i + 1}. ${metric}`).join('\n')}

TIMELINE
========
${analysis.timeline}

---
Generated by ContentScale AI Consulting Platform
Contact: consultant@contentscale.site
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `contentscale-report-${consultation.category}-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-muted rounded w-1/3"></div>
          <div className="h-4 bg-muted rounded w-1/4"></div>
          <div className="grid gap-4">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-32 bg-muted rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (!consultation || !analysis) {
    return (
      <div className="container mx-auto px-4 py-8 text-center">
        <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
        <h2 className="text-2xl font-bold mb-2">Analysis Not Found</h2>
        <p className="text-muted-foreground mb-4">
          The analysis for this consultation is not available or still being processed.
        </p>
        <Link href="/dashboard">
          <Button>Return to Dashboard</Button>
        </Link>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-4">
          <Link href="/dashboard">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Dashboard
            </Button>
          </Link>
          <div>
            <h1 className="text-3xl font-bold">{consultation.title}</h1>
            <p className="text-muted-foreground">
              {consultation.category.charAt(0).toUpperCase() + consultation.category.slice(1).replace('-', ' ')} Consultation â€¢ {formatDate(analysis.createdAt)}
            </p>
          </div>
        </div>
        <Button onClick={downloadReport}>
          <Download className="h-4 w-4 mr-2" />
          Download Report
        </Button>
      </div>

      {/* Confidence & Status */}
      <div className="grid md:grid-cols-3 gap-4 mb-8">
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Analysis Confidence</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <div className="text-2xl font-bold text-green-600">
                {Math.round(analysis.confidence * 100)}%
              </div>
              <Badge variant="secondary">High Confidence</Badge>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Urgency Level</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-2">
              <div className="text-2xl font-bold capitalize">
                {consultation.urgency}
              </div>
              {consultation.urgency === "critical" && <AlertTriangle className="h-5 w-5 text-red-500" />}
              {consultation.urgency === "high" && <Clock className="h-5 w-5 text-yellow-500" />}
              {consultation.urgency === "medium" && <TrendingUp className="h-5 w-5 text-blue-500" />}
              {consultation.urgency === "low" && <CheckCircle className="h-5 w-5 text-green-500" />}
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Timeline</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-lg font-medium">
              {analysis.timeline}
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid lg:grid-cols-3 gap-8">
        {/* Main Analysis */}
        <div className="lg:col-span-2 space-y-6">
          {/* Executive Summary */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Target className="h-5 w-5" />
                <span>Executive Analysis</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="prose prose-sm max-w-none">
                <p className="whitespace-pre-wrap text-sm leading-relaxed">
                  {analysis.analysis}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Recommendations */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <CheckCircle className="h-5 w-5" />
                <span>Strategic Recommendations</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analysis.recommendations.map((recommendation, index) => (
                  <div key={index} className="flex items-start space-x-3 p-3 bg-muted/50 rounded-lg">
                    <div className="w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-bold mt-0.5">
                      {index + 1}
                    </div>
                    <p className="text-sm flex-1">{recommendation}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Implementation Plan */}
          <Card>
            <CardHeader>
              <CardTitle>Implementation Plan</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="prose prose-sm max-w-none">
                <p className="whitespace-pre-wrap text-sm leading-relaxed">
                  {analysis.implementationPlan}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Expected Outcomes */}
          <Card>
            <CardHeader>
              <CardTitle>Expected Outcomes</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {analysis.expectedOutcomes.map((outcome, index) => (
                  <div key={index} className="flex items-start space-x-2">
                    <TrendingUp className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                    <p className="text-sm">{outcome}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Action Items */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Immediate Action Items</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {analysis.actionItems.map((item, index) => (
                  <div key={index} className="flex items-start space-x-2">
                    <input 
                      type="checkbox" 
                      className="mt-1 rounded border-gray-300"
                      id={`action-${index}`}
                    />
                    <label 
                      htmlFor={`action-${index}`}
                      className="text-sm cursor-pointer flex-1"
                    >
                      {item}
                    </label>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Required Resources */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Required Resources</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {analysis.resources.map((resource, index) => (
                  <div key={index} className="flex items-start space-x-2">
                    <Users className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                    <p className="text-sm">{resource}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Success Metrics */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Success Metrics</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {analysis.metrics.map((metric, index) => (
                  <div key={index} className="flex items-start space-x-2">
                    <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sm">{metric}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Risk Assessment */}
          {analysis.riskAssessment && (
            <Card>
              <CardHeader>
                <CardTitle className="text-lg text-yellow-600">Risk Assessment</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">
                  {analysis.riskAssessment}
                </p>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}